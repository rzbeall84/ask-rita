name: Deploy Supabase Edge Functions

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'supabase/functions/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy all functions'
        required: false
        type: boolean
        default: false

env:
  SUPABASE_PROJECT_ID: onargmygfwynbbrytkpy

jobs:
  deploy-functions:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: |
          npm install -g supabase@latest
          supabase --version

      - name: Login to Supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "Logging into Supabase..."
          supabase login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Link to Supabase project
        run: |
          echo "Linking to project $SUPABASE_PROJECT_ID..."
          supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: Deploy Edge Functions in Priority Order
        env:
          FORCE_DEPLOY: ${{ github.event.inputs.force_deploy || 'false' }}
        run: |
          echo "Starting Edge Function deployment..."
          echo "Force deploy: $FORCE_DEPLOY"
          
          # Color codes for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          # Deployment function
          deploy_function() {
            local func_name=$1
            local description=$2
            local no_verify_jwt=${3:-false}
            
            echo -e "${BLUE}üì¶ Deploying $func_name...${NC}"
            echo "   Description: $description"
            
            if [ "$no_verify_jwt" = "true" ]; then
              echo "   JWT Verification: Disabled"
              if supabase functions deploy $func_name --no-verify-jwt; then
                echo -e "${GREEN}‚úÖ $func_name deployed successfully${NC}"
                return 0
              else
                echo -e "${RED}‚ùå Failed to deploy $func_name${NC}"
                return 1
              fi
            else
              echo "   JWT Verification: Enabled"
              if supabase functions deploy $func_name; then
                echo -e "${GREEN}‚úÖ $func_name deployed successfully${NC}"
                return 0
              else
                echo -e "${RED}‚ùå Failed to deploy $func_name${NC}"
                return 1
              fi
            fi
          }
          
          # Track deployment results
          deployed_count=0
          failed_count=0
          failed_functions=()
          
          echo -e "${YELLOW}üöÄ Starting deployment in priority order...${NC}"
          
          # Phase 1: Security & Authentication Functions
          echo -e "\n${YELLOW}üìã Phase 1: Security & Authentication Functions${NC}"
          
          if deploy_function "create-admin-user" "Creates admin user accounts" "true"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("create-admin-user")
          fi
          
          if deploy_function "manage-user-session" "Manages user sessions and authentication" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("manage-user-session")
          fi
          
          if deploy_function "validate-invite" "Validates organization invitations" "true"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("validate-invite")
          fi
          
          # Phase 2: Core Infrastructure
          echo -e "\n${YELLOW}üìã Phase 2: Core Infrastructure${NC}"
          
          if deploy_function "setup-user-sessions" "Sets up user session tracking" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("setup-user-sessions")
          fi
          
          if deploy_function "setup-query-usage" "Sets up usage tracking" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("setup-query-usage")
          fi
          
          if deploy_function "update-database-schema" "Database schema updates" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("update-database-schema")
          fi
          
          # Phase 3: Document Processing
          echo -e "\n${YELLOW}üìã Phase 3: Document Processing${NC}"
          
          if deploy_function "extract-document-text" "Processes uploaded documents" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("extract-document-text")
          fi
          
          if deploy_function "generate-embeddings" "Creates AI embeddings for search" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("generate-embeddings")
          fi
          
          if deploy_function "search-embeddings" "Searches document embeddings" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("search-embeddings")
          fi
          
          # Phase 4: AI Chat
          echo -e "\n${YELLOW}üìã Phase 4: AI Chat${NC}"
          
          if deploy_function "rita-chat" "Main AI chat functionality" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("rita-chat")
          fi
          
          # Phase 5: Communication
          echo -e "\n${YELLOW}üìã Phase 5: Communication${NC}"
          
          if deploy_function "send-email" "Email sending functionality" "true"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("send-email")
          fi
          
          if deploy_function "generate-invite" "Creates organization invites" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("generate-invite")
          fi
          
          # Phase 6: Billing & Subscriptions
          echo -e "\n${YELLOW}üìã Phase 6: Billing & Subscriptions${NC}"
          
          if deploy_function "stripe-webhook" "Handles Stripe webhooks" "true"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("stripe-webhook")
          fi
          
          if deploy_function "create-checkout-session" "Stripe checkout creation" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("create-checkout-session")
          fi
          
          if deploy_function "create-overage-checkout" "Overage billing checkout" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("create-overage-checkout")
          fi
          
          if deploy_function "customer-portal" "Stripe customer portal" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("customer-portal")
          fi
          
          if deploy_function "check-subscription" "Validates subscriptions" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("check-subscription")
          fi
          
          # Phase 7: Organization Management
          echo -e "\n${YELLOW}üìã Phase 7: Organization Management${NC}"
          
          if deploy_function "join-organization" "Handles organization joining" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("join-organization")
          fi
          
          if deploy_function "setup-org-integrations" "Organization integration setup" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("setup-org-integrations")
          fi
          
          # Phase 8: Quickbase Integration
          echo -e "\n${YELLOW}üìã Phase 8: Quickbase Integration${NC}"
          
          if deploy_function "encrypt-quickbase-token" "Encrypts Quickbase API tokens" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("encrypt-quickbase-token")
          fi
          
          if deploy_function "test-quickbase-connection" "Tests Quickbase connectivity" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("test-quickbase-connection")
          fi
          
          if deploy_function "schedule-quickbase-sync" "Schedules data sync" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("schedule-quickbase-sync")
          fi
          
          if deploy_function "sync-quickbase-data" "Syncs Quickbase data" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("sync-quickbase-data")
          fi
          
          # Phase 9: Administrative
          echo -e "\n${YELLOW}üìã Phase 9: Administrative${NC}"
          
          if deploy_function "admin-dashboard" "Admin dashboard backend" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("admin-dashboard")
          fi
          
          if deploy_function "update-promo-codes" "Manages promotional codes" "false"; then
            ((deployed_count++))
          else
            ((failed_count++))
            failed_functions+=("update-promo-codes")
          fi
          
          # Final Summary
          echo -e "\n${BLUE}üìä DEPLOYMENT SUMMARY${NC}"
          echo "=========================="
          echo -e "${GREEN}‚úÖ Successfully deployed: $deployed_count functions${NC}"
          
          if [ $failed_count -gt 0 ]; then
            echo -e "${RED}‚ùå Failed deployments: $failed_count functions${NC}"
            echo -e "${RED}Failed functions:${NC}"
            for func in "${failed_functions[@]}"; do
              echo -e "${RED}  - $func${NC}"
            done
            exit 1
          else
            echo -e "${GREEN}üéâ All functions deployed successfully!${NC}"
          fi

      - name: Verify deployments
        run: |
          echo "Verifying Edge Function deployments..."
          supabase functions list
          
          echo "Deployment completed successfully! ‚úÖ"
          echo "All Edge Functions are now available at:"
          echo "https://onargmygfwynbbrytkpy.supabase.co/functions/v1/"